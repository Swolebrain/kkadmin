{"version":3,"sources":["history.js","Authorization.js","Callback.js","routes/MainOpenRoute.js","routes/EditEducationalInfo.js","routes/AdminRoute.js","App.js","serviceWorker.js","index.js"],"names":["createHistory","Authorization","Auth","Object","classCallCheck","this","accessToken","idToken","expiresAt","auth0","WebAuth","domain","clientID","redirectUri","window","location","href","indexOf","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","authorize","_this","Promise","resolve","reject","parseHash","err","authResult","console","log","setSession","localStorage","setItem","expiresIn","Date","getTime","_this2","checkSession","alert","concat","error","error_description","removeItem","history","replace","Callback","props","auth","push","react_default","a","createElement","className","Component","MainOpenRoute","_ref","startAuth","onClick","EditEducationalInfo","formKeys","labels","values","segmentType","handleTextChange","addNewParagraph","deleteParagraph","handleFormSubmit","Fragment","map","attr","attrIdx","key","paragraph","pIdx","Grid_Grid_default","container","direction","alignItems","item","xs","TextField_default","value","onChange","multiline","id","label","margin","style","textAlign","paddingBottom","Fab_default","variant","color","size","Button_Button_default","marginTop","API_URL","AdminRoute","state","parent","utilization","paymentHistory","accountAge","numAccounts","creditInquiries","derogatoryMarks","child","keys","snackbarVisible","displaySnackBar","timeout","clearTimeout","setState","setTimeout","group","prop","prevState","defineProperty","objectSpread","paragraphIdxToDelete","filter","_","i","paragraphNumber","e","newVal","target","toConsumableArray","slice","kind","_ref4","asyncToGenerator","regenerator_default","mark","_callee","routeMap","payload","wrap","_context","prev","next","join","fetch","headers","Content-Type","method","body","JSON","stringify","sent","status","stop","_x","apply","arguments","all","then","res","json","split","pathname","Grid_default","spacing","maxWidth","Card_default","CardContent_default","Typography_default","component","NavLink","to","Button_default","es_Switch","es_Route","path","render","Snackbar_default","anchorOrigin","vertical","horizontal","open","onClose","ContentProps","aria-describedby","message","App","Router","Switch","Route","routes_AdminRoute","Redirect","routes_MainOpenRoute","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58ad97a3.chunk.js","sourcesContent":["import createHistory from 'history/createBrowserHistory'\r\n\r\nexport default createHistory()","import auth0 from 'auth0-js';\r\nimport history from './history';\r\n\r\nclass Auth {\r\n    accessToken = null;\r\n    idToken = null;\r\n    expiresAt = null;\r\n\r\n    auth0 = new auth0.WebAuth({\r\n        domain: 'kiddiekredit.auth0.com',\r\n        clientID: 'LVfVnJg9zngBlm5fIPkAPsZO5wyveh1z',\r\n        redirectUri: window.location.href.indexOf('localhost') === -1 ? 'http://kkadmin.s3-website-us-east-1.amazonaws.com/callback' : 'http://localhost:3000/callback',\r\n        responseType: 'token id_token',\r\n        scope: 'openid'\r\n    });\r\n\r\n    constructor() {\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n        this.isAuthenticated = this.isAuthenticated.bind(this);\r\n        this.getAccessToken = this.getAccessToken.bind(this);\r\n        this.getIdToken = this.getIdToken.bind(this);\r\n        this.renewSession = this.renewSession.bind(this);\r\n    }\r\n\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    handleAuthentication() {\r\n        return new Promise((resolve, reject) => {\r\n            this.auth0.parseHash((err, authResult) => {\r\n                if (err) {\r\n                    console.log(err);\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                if (authResult && authResult.accessToken && authResult.idToken) {\r\n                    this.setSession(authResult);\r\n                    resolve(true);\r\n                }\r\n                reject('unknown error');\r\n            });\r\n        });\r\n    }\r\n    getAccessToken() {\r\n        return this.accessToken;\r\n    }\r\n\r\n    getIdToken() {\r\n        return this.idToken;\r\n    }\r\n\r\n    setSession(authResult) {\r\n        // Set isLoggedIn flag in localStorage\r\n        localStorage.setItem('isLoggedIn', 'true');\r\n\r\n        // Set the time that the access token will expire at\r\n        let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\r\n        this.accessToken = authResult.accessToken;\r\n        this.idToken = authResult.idToken;\r\n        this.expiresAt = expiresAt;\r\n    }\r\n\r\n    renewSession() {\r\n        this.auth0.checkSession({}, (err, authResult) => {\r\n            if (authResult && authResult.accessToken && authResult.idToken) {\r\n                this.setSession(authResult);\r\n                console.log(authResult.idToken)\r\n            } else if (err) {\r\n                this.logout();\r\n                console.log(err);\r\n                alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\r\n            }\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        // Remove tokens and expiry time\r\n        this.accessToken = null;\r\n        this.idToken = null;\r\n        this.expiresAt = 0;\r\n\r\n        // Remove isLoggedIn flag from localStorage\r\n        localStorage.removeItem('isLoggedIn');\r\n\r\n        // navigate to the home route\r\n        history.replace('/home');\r\n    }\r\n\r\n    isAuthenticated() {\r\n        // Check whether the current time is past the\r\n        // access token's expiry time\r\n        let expiresAt = this.expiresAt;\r\n        return new Date().getTime() < expiresAt;\r\n    }\r\n}\r\n\r\n\r\nexport default new Auth();","import React, { Component } from 'react';\r\nimport auth from './Authorization';\r\n\r\nclass Callback extends Component {\r\n    async componentDidMount() {\r\n        console.log(this.props);\r\n        const authResult = await auth.handleAuthentication();\r\n        if (authResult === true)\r\n            this.props.history.push('/admin');\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={'app'}>\r\n                loading...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Callback;","import React from 'react';\r\n\r\nconst MainOpenRoute = ({startAuth}) => (\r\n    <div>\r\n        not logged in route\r\n        <button onClick={startAuth}>log in</button>\r\n    </div>\r\n);\r\n\r\nexport default MainOpenRoute;","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\nimport Fab from \"@material-ui/core/Fab/Fab\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent/CardContent\";\r\nimport Grid from \"@material-ui/core/Grid/Grid\";\r\n\r\n\r\nexport default function EditEducationalInfo({formKeys, labels, values, segmentType, handleTextChange, addNewParagraph, deleteParagraph, handleFormSubmit}){\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                {\r\n                    formKeys.map((attr, attrIdx) =>{\r\n                        return  (\r\n                            <React.Fragment key={attr}>\r\n                                <h3>{labels[attrIdx]} ({segmentType})</h3>\r\n                                {\r\n                                    values[attr].map((paragraph, pIdx) => (\r\n                                        <Grid container direction={'row'} alignItems={'flex-end'}>\r\n                                            <Grid item xs={10} className={\"form-container\"}>\r\n                                                <TextField\r\n                                                    key={`${attr}-${pIdx}`}\r\n                                                    value={values[attr][pIdx]}\r\n                                                    onChange={handleTextChange(segmentType, attr, pIdx)}\r\n                                                    multiline\r\n                                                    id={`${attr}-${pIdx}`}\r\n                                                    label={labels[attrIdx] + ' paragraph ' + (pIdx+1)}\r\n                                                    margin=\"normal\"\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={2} style={{textAlign: 'center', paddingBottom: 10}}>\r\n                                                <Fab onClick={deleteParagraph(segmentType, attr, pIdx)} variant={'extended'} color={'disabled'} size={'small'}>x</Fab>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    ))\r\n                                }\r\n                                <Fab color='primary' size='small' onClick={addNewParagraph(segmentType, attr)} >+</Fab>\r\n                            </React.Fragment>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n            <Button style={{marginTop: 16}} variant={\"contained\"} color={'primary'} onClick={handleFormSubmit(segmentType)}>Save Changes</Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport auth from '../Authorization';\r\nimport EditEducationalInfo from \"./EditEducationalInfo\";\r\nimport {Route, Switch} from \"react-router\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\n\r\nconst API_URL = 'http://api.kiddiekredit.com:8080/educationalinfo/';\r\n\r\n\r\n\r\n/**\r\n * utilization: '',\r\n paymentHistory: '',\r\n accountAge: '',\r\n numAccounts: '',\r\n creditInquiries: '',\r\n derogatoryMarks: '',\r\n */\r\nclass AdminRoute extends Component {\r\n    state = {\r\n        parent: {\r\n            utilization: [''],\r\n            paymentHistory: [''],\r\n            accountAge: [''],\r\n            numAccounts: [''],\r\n            creditInquiries: [''],\r\n            derogatoryMarks: [''],\r\n        },\r\n        child: {\r\n            utilization: [''],\r\n            paymentHistory: [''],\r\n            accountAge: [''],\r\n            numAccounts: [''],\r\n            creditInquiries: [''],\r\n            derogatoryMarks: [''],\r\n        },\r\n        keys: ['utilization', 'paymentHistory', 'accountAge', 'numAccounts', 'creditInquiries', 'derogatoryMarks'],\r\n        labels: ['Utilization', 'Payment History', 'Account Age', 'Num Accounts', 'Credit Inquiries', 'Derogatory Marks'],\r\n        snackbarVisible: false\r\n    }\r\n    displaySnackBar = () => {\r\n        if (this.timeout) clearTimeout(this.timeout);\r\n        this.setState(() => ({snackbarVisible: true}));\r\n        this.timeout = setTimeout(() =>\r\n            this.setState(() => ({snackbarVisible: false}))\r\n        , 1250);\r\n    }\r\n    async componentDidMount() {\r\n        console.log(auth.getIdToken())\r\n        const [parent, child] = await Promise.all([\r\n            fetch(API_URL + 'parentkreditdashboard', {headers: {Authorization: 'Bearer ' + auth.getIdToken()}}).then(res => res.json()),\r\n            fetch(API_URL + 'kidkreditdashboard', {headers: {Authorization: 'Bearer ' + auth.getIdToken()}}).then(res => res.json())\r\n        ]);\r\n        for (let prop in parent)\r\n            if (prop !== '_id' && typeof parent[prop] === 'string') parent[prop] = parent[prop].split('|');\r\n            else delete parent[prop];\r\n\r\n        for (let prop in child)\r\n            if (prop !== '_id' && typeof child[prop] === 'string') child[prop] = child[prop].split('|');\r\n            else delete child[prop];\r\n\r\n        console.log(parent, child);\r\n\r\n        if (parent && child) this.setState(() => ({parent, child}));\r\n    }\r\n    addNewParagraph = (group, prop) => () => this.setState((prevState) => ({\r\n        [group]: {\r\n            ...prevState[group],\r\n            [prop]: prevState[group][prop].concat([''])\r\n        }\r\n    }))\r\n    deleteParagraph = (group, prop, paragraphIdxToDelete) => () => this.setState((prevState) => ({\r\n        [group]: {\r\n            ...prevState[group],\r\n            [prop]: prevState[group][prop].filter((_, i) => i !== paragraphIdxToDelete)\r\n        }\r\n    }))\r\n    handleTextChange = (group, prop, paragraphNumber) => (e) => {\r\n        const newVal = e.target.value;\r\n        this.setState((prevState) => ({\r\n            [group]: {\r\n                ...prevState[group],\r\n                [prop]: [\r\n                    ...prevState[group][prop].slice(0, paragraphNumber),\r\n                    newVal,\r\n                    ...prevState[group][prop].slice(paragraphNumber+1),\r\n                ]\r\n            }\r\n        }))\r\n    }\r\n    handleFormSubmit = (kind) => async e => {\r\n        const routeMap = {\r\n            child: 'kidkreditdashboard',\r\n            parent: 'parentkreditdashboard'\r\n        };\r\n        const payload = {};\r\n        for (let key in this.state[kind]){\r\n            console.log(key);\r\n            payload[key] = this.state[kind][key].join('|');\r\n        }\r\n\r\n        const fetchResult = await fetch(API_URL + routeMap[kind], {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + auth.getIdToken()\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify(payload)\r\n        });\r\n        if (fetchResult.status === 200)\r\n            this.displaySnackBar()\r\n        else\r\n            alert('Something went wrong, try again later');\r\n    }\r\n    render() {\r\n        const {pathname} = this.props.location;\r\n        return (\r\n            <Grid container spacing={16} style={{maxWidth: 800, margin: '2rem auto'}}>\r\n                <Grid item xs={12}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography variant={\"h5\"} component={\"h3\"}>\r\n                                Educational Info Administration\r\n                            </Typography>\r\n                            <NavLink to={'/admin'}>\r\n                                <Button color={pathname === '/admin' ? 'primary' : 'disabled'}>\r\n                                    Parent\r\n                                </Button>\r\n                            </NavLink>\r\n                            <NavLink to={'/admin/child'}>\r\n                                <Button color={pathname === '/admin/child' ? 'primary' : 'disabled'}>\r\n                                    Child\r\n                                </Button>\r\n                            </NavLink>\r\n                            <Switch>\r\n                                <Route path={'/admin/child'} render={() => <EditEducationalInfo\r\n                                    formKeys={this.state.keys}\r\n                                    labels={this.state.labels}\r\n                                    segmentType={'child'}\r\n                                    values={this.state.child}\r\n                                    handleTextChange={this.handleTextChange}\r\n                                    addNewParagraph={this.addNewParagraph}\r\n                                    deleteParagraph={this.deleteParagraph}\r\n                                    handleFormSubmit={this.handleFormSubmit}\r\n                                />}\r\n                                />\r\n                                <Route path={'/admin'} render={() => <EditEducationalInfo\r\n                                        formKeys={this.state.keys}\r\n                                        labels={this.state.labels}\r\n                                        segmentType={'parent'}\r\n                                        values={this.state.parent}\r\n                                        handleTextChange={this.handleTextChange}\r\n                                        addNewParagraph={this.addNewParagraph}\r\n                                        deleteParagraph={this.deleteParagraph}\r\n                                        handleFormSubmit={this.handleFormSubmit}\r\n                                    />}\r\n                                />\r\n                            </Switch>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Snackbar\r\n                    anchorOrigin={{ vertical: 'top', horizontal: 'right'}}\r\n                    open={this.state.snackbarVisible}\r\n                    onClose={()=>this.setState(() => ({snackbarVisible: false}))}\r\n                    ContentProps={{\r\n                        'aria-describedby': 'message-id',\r\n                    }}\r\n                    message={<span id=\"message-id\">Data Saved!</span>}\r\n                />\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminRoute;","import React, {Component} from 'react';\nimport auth from './Authorization';\nimport history from './history';\nimport {Router, Route, Switch, Redirect} from 'react-router-dom';\nimport './App.css';\nimport Callback from \"./Callback\";\nimport MainOpenRoute from \"./routes/MainOpenRoute\";\nimport AdminRoute from \"./routes/AdminRoute\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <Router history={history}>\n                <Switch>\n                    <Route path='/callback' component={Callback} />\n                    <Route path='/admin' render={(props) => auth.getIdToken() ? <AdminRoute {...props}/> : <Redirect to={'/'} /> } />\n                    <Route path='/' render={() => <MainOpenRoute startAuth={auth.login}/>} />\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}